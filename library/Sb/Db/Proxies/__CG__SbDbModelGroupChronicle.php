<?php

namespace Proxies\__CG__\Sb\Db\Model;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class GroupChronicle extends \Sb\Db\Model\GroupChronicle implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getGroup()
    {
        $this->__load();
        return parent::getGroup();
    }

    public function setGroup($group)
    {
        $this->__load();
        return parent::setGroup($group);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setUser($user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getBook()
    {
        $this->__load();
        return parent::getBook();
    }

    public function setBook($book)
    {
        $this->__load();
        return parent::setBook($book);
    }

    public function getTitle()
    {
        $this->__load();
        return parent::getTitle();
    }

    public function setTitle($title)
    {
        $this->__load();
        return parent::setTitle($title);
    }

    public function getText()
    {
        $this->__load();
        return parent::getText();
    }

    public function setText($text)
    {
        $this->__load();
        return parent::setText($text);
    }

    public function getType_id()
    {
        $this->__load();
        return parent::getType_id();
    }

    public function setType_id($type_id)
    {
        $this->__load();
        return parent::setType_id($type_id);
    }

    public function getLink_type()
    {
        $this->__load();
        return parent::getLink_type();
    }

    public function setLink_type($link_type)
    {
        $this->__load();
        return parent::setLink_type($link_type);
    }

    public function getLink()
    {
        $this->__load();
        return parent::getLink();
    }

    public function setLink($link)
    {
        $this->__load();
        return parent::setLink($link);
    }

    public function getCreation_date()
    {
        $this->__load();
        return parent::getCreation_date();
    }

    public function setCreation_date($creation_date)
    {
        $this->__load();
        return parent::setCreation_date($creation_date);
    }

    public function getIs_published()
    {
        $this->__load();
        return parent::getIs_published();
    }

    public function setIs_published($is_published)
    {
        $this->__load();
        return parent::setIs_published($is_published);
    }

    public function getSource()
    {
        $this->__load();
        return parent::getSource();
    }

    public function setSource($source)
    {
        $this->__load();
        return parent::setSource($source);
    }

    public function getKeywords()
    {
        $this->__load();
        return parent::getKeywords();
    }

    public function setKeywords($keywords)
    {
        $this->__load();
        return parent::setKeywords($keywords);
    }

    public function getTag()
    {
        $this->__load();
        return parent::getTag();
    }

    public function setTag($tag)
    {
        $this->__load();
        return parent::setTag($tag);
    }

    public function getIs_validated()
    {
        $this->__load();
        return parent::getIs_validated();
    }

    public function setIs_validated($is_validated)
    {
        $this->__load();
        return parent::setIs_validated($is_validated);
    }

    public function getNb_views()
    {
        $this->__load();
        return parent::getNb_views();
    }

    public function setNb_views($nb_views)
    {
        $this->__load();
        return parent::setNb_views($nb_views);
    }

    public function getImage()
    {
        $this->__load();
        return parent::getImage();
    }

    public function setImage($image)
    {
        $this->__load();
        return parent::setImage($image);
    }

    public function IsValid()
    {
        $this->__load();
        return parent::IsValid();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'title', 'text', 'type_id', 'link_type', 'link', 'creation_date', 'is_published', 'source', 'keywords', 'is_validated', 'nb_views', 'image', 'group', 'user', 'book', 'tag');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}