<?php

namespace Proxies\__CG__\Sb\Db\Model;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class UserEvent extends \Sb\Db\Model\UserEvent implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setUser($user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getType_id()
    {
        $this->__load();
        return parent::getType_id();
    }

    public function setType_id($type_id)
    {
        $this->__load();
        return parent::setType_id($type_id);
    }

    public function getItem_id()
    {
        $this->__load();
        return parent::getItem_id();
    }

    public function setItem_id($item_id)
    {
        $this->__load();
        return parent::setItem_id($item_id);
    }

    public function getOld_value()
    {
        $this->__load();
        return parent::getOld_value();
    }

    public function setOld_value($old_value)
    {
        $this->__load();
        return parent::setOld_value($old_value);
    }

    public function getNew_value()
    {
        $this->__load();
        return parent::getNew_value();
    }

    public function setNew_value($new_value)
    {
        $this->__load();
        return parent::setNew_value($new_value);
    }

    public function getCreation_date()
    {
        $this->__load();
        return parent::getCreation_date();
    }

    public function setCreation_date($creation_date)
    {
        $this->__load();
        return parent::setCreation_date($creation_date);
    }

    public function getBook()
    {
        $this->__load();
        return parent::getBook();
    }

    public function setBook($book)
    {
        $this->__load();
        return parent::setBook($book);
    }

    public function getFriend()
    {
        $this->__load();
        return parent::getFriend();
    }

    public function setFriend($friend)
    {
        $this->__load();
        return parent::setFriend($friend);
    }

    public function IsValid()
    {
        $this->__load();
        return parent::IsValid();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'type_id', 'item_id', 'old_value', 'new_value', 'creation_date', 'user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}